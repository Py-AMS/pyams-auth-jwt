#
# SOME DESCRIPTIVE TITLE
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE 1.0\n"
"POT-Creation-Date: 2023-12-05 17:55+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Lingua 4.15.0\n"

#: ./src/pyams_auth_jwt/plugin.py:94
msgid "JWT authentication"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:84 ./src/pyams_auth_jwt/interfaces.py:149
msgid "Access token attribute"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:85
msgid ""
"Name of the JSON attribute containing access token returned by REST APIs"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:90 ./src/pyams_auth_jwt/interfaces.py:155
msgid "Refresh token attribute"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:91
msgid ""
"Name of the JSON attribute containing refresh token returned by REST APIs"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:98
msgid "Enable JWT direct authentication?"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:99
msgid "Enable direct login via JWT authentication"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:103
msgid "JWT encoding algorithm"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:104
msgid ""
"HS* protocols are using the secret, while RS* protocols are using RSA keys"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:110
msgid "JWT secret"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:111
msgid "This secret is required when using HS* encryption"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:114
msgid "JWT private key"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:115
msgid "The secret key is required when using RS* algorithm"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:118
msgid "JWT public key"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:119
msgid "The public key is required when using RS* algorithm"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:122
msgid "Access token lifetime"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:123
msgid "JWT access token lifetime, in seconds"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:127
msgid "Refresh token lifetime"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:128
msgid "JWT refresh token lifetime, in seconds"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:132
msgid "Enable JWT proxy authentication?"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:133
msgid ""
"If this option is enabled, tokens management requests will be forwarded to "
"another authentication authority"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:138
msgid "Authentication authority"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:139
msgid ""
"Base URL (protocol and hostname) of the authentication authority to which "
"tokens management requests will be forwarded"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:144
msgid "Token getter service"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:145
msgid "REST HTTP service used to get a new token"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:150
msgid ""
"Name of the JSON attribute returned by REST API containing access tokens"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:156
msgid ""
"Name of the JSON attribute returned by REST API containing refresh tokens"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:161
msgid "Token claims getter"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:162
msgid ""
"REST HTTP service used to extract claims from provided authorization token"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:167
msgid "Token refresh service"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:168
msgid "REST HTTP service used to get a new access token with a refresh token"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:173
msgid "Token verify service"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:174
msgid "REST HTTP service used to check validity of an existing token"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:179
msgid "Verify SSL?"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:180
msgid "If 'no', SSL certificates will not be verified"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:184
msgid "Use verified tokens cache?"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:185
msgid ""
"If selected, this option allows to store credentials in a local cache from "
"which they can be reused"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:190
msgid "Selected tokens cache"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:191
msgid "Beaker cache selected to store validated tokens"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:200
msgid "You can't enable both local and proxy modes"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:203
msgid "You must choose an algorithm to enable JWT authentication"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:206
msgid "You must define JWT secret to use HS256 algorithm"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:209
msgid "You must define a private and a public key to use RS256 algorithm"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:213
msgid "You must define authentication authority to use proxy mode"
msgstr ""

#: ./src/pyams_auth_jwt/interfaces.py:215
msgid "You must choose a cache to enable tokens caching"
msgstr ""

#: ./src/pyams_auth_jwt/zmi/plugin.py:50 ./src/pyams_auth_jwt/zmi/plugin.py:60
msgid "JWT configuration"
msgstr ""

#: ./src/pyams_auth_jwt/zmi/plugin.py:61
msgid "JWT tokens settings"
msgstr ""

#: ./src/pyams_auth_jwt/zmi/plugin.py:109
msgid ""
"JWT authentication module \"local mode\" allows to generate, check and refresh tokens locally.\n"
"You can choose to use a simple secret key to encrypt your tokens, or to use a private and public keys pair (which can to be used to share tokens between two applications)."
msgstr ""

#: ./src/pyams_auth_jwt/zmi/plugin.py:122
msgid ""
"You can use the `openssl` command to generate your keys:\n"
"\n"
"    openssl genpkey -algorithm RSA -out private-key.pem\n"
"    openssl rsa -pubout -in private-key.pem -out public-key.pem\n"
msgstr ""

#: ./src/pyams_auth_jwt/zmi/plugin.py:156
msgid ""
"JWT authentication module \"proxy mode\" relies on another authentication authority (which can be another application using this JWT package) to generate, check and refresh tokens. This authority can be used to share access tokens between different applications.\n"
"You can cache tokens to reduce the number of requests which will be forwarded to the authentication authority."
msgstr ""
